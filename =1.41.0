Collecting Rust
  Using cached https://files.pythonhosted.org/packages/c3/ff/1ffe5c38505fd5226e344aaf91fd43dc38648ccf79ae7096ea0fa4f7f815/RUST-0.1.1.tar.gz
Collecting matplotlib (from Rust)
  Using cached https://files.pythonhosted.org/packages/09/03/b7b30fa81cb687d1178e085d0f01111ceaea3bf81f9330c937fb6f6c8ca0/matplotlib-3.3.4-cp36-cp36m-manylinux1_x86_64.whl
Requirement already satisfied: biopython in ./virtual_env/lib/python3.6/site-packages (from Rust)
Collecting pysam (from Rust)
  Using cached https://files.pythonhosted.org/packages/15/79/00249a37089a6aecb70a4080f8af8d88e7005e2019c71e505c3ad3a0a018/pysam-0.18.0.tar.gz
    Complete output from command python setup.py egg_info:
    # pysam: no cython available - using pre-compiled C
    # pysam: htslib mode is shared
    # pysam: HTSLIB_CONFIGURE_OPTIONS=None
    # pysam: (sysconfig) CC=x86_64-linux-gnu-gcc -pthread
    # pysam: (sysconfig) CFLAGS=-Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g   -fstack-protector-strong -Wformat -Werror=format-security  -g -flto -fuse-linker-plugin -ffat-lto-objects
    # pysam: (sysconfig) LDFLAGS=-Wl,-Bsymbolic-functions  -Wl,-z,relro
    checking for gcc... x86_64-linux-gnu-gcc -pthread
    checking whether the C compiler works... yes
    checking for C compiler default output file name... a.out
    checking for suffix of executables...
    checking whether we are cross compiling... no
    checking for suffix of object files... o
    checking whether we are using the GNU C compiler... yes
    checking whether x86_64-linux-gnu-gcc -pthread accepts -g... yes
    checking for x86_64-linux-gnu-gcc -pthread option to accept ISO C89... none needed
    checking for ranlib... ranlib
    checking for grep that handles long lines and -e... /bin/grep
    checking for C compiler warning flags... unknown
    checking for pkg-config... no
    checking for special C compiler options needed for large files... no
    checking for _FILE_OFFSET_BITS value needed for large files... no
    checking shared library type for unknown-Linux... plain .so
    checking whether the compiler accepts -fvisibility=hidden... yes
    checking how to run the C preprocessor... x86_64-linux-gnu-gcc -pthread -E
    checking for egrep... /bin/grep -E
    checking for ANSI C header files... yes
    checking for sys/types.h... yes
    checking for sys/stat.h... yes
    checking for stdlib.h... yes
    checking for string.h... yes
    checking for memory.h... yes
    checking for strings.h... yes
    checking for inttypes.h... yes
    checking for stdint.h... yes
    checking for unistd.h... yes
    checking for stdlib.h... (cached) yes
    checking for unistd.h... (cached) yes
    checking for sys/param.h... yes
    checking for getpagesize... yes
    checking for working mmap... yes
    checking for gmtime_r... yes
    checking for fsync... yes
    checking for drand48... yes
    checking for srand48_deterministic... no
    checking whether fdatasync is declared... yes
    checking for fdatasync... yes
    checking for library containing log... -lm
    checking for zlib.h... yes
    checking for inflate in -lz... yes
    checking for library containing recv... none required
    checking for bzlib.h... no
    checking for BZ2_bzBuffToBuffCompress in -lbz2... no
    configure: error: libbzip2 development files not found
    
    The CRAM format may use bzip2 compression, which is implemented in HTSlib
    by using compression routines from libbzip2 <http://www.bzip.org/>.
    
    Building HTSlib requires libbzip2 development files to be installed on the
    build machine; you may need to ensure a package such as libbz2-dev (on Debian
    or Ubuntu Linux) or bzip2-devel (on RPM-based Linux distributions or Cygwin)
    is installed.
    
    Either configure with --disable-bz2 (which will make some CRAM files
    produced elsewhere unreadable) or resolve this error to build HTSlib.
    checking for gcc... x86_64-linux-gnu-gcc -pthread
    checking whether the C compiler works... yes
    checking for C compiler default output file name... a.out
    checking for suffix of executables...
    checking whether we are cross compiling... no
    checking for suffix of object files... o
    checking whether we are using the GNU C compiler... yes
    checking whether x86_64-linux-gnu-gcc -pthread accepts -g... yes
    checking for x86_64-linux-gnu-gcc -pthread option to accept ISO C89... none needed
    checking for ranlib... ranlib
    checking for grep that handles long lines and -e... /bin/grep
    checking for C compiler warning flags... unknown
    checking for pkg-config... no
    checking for special C compiler options needed for large files... no
    checking for _FILE_OFFSET_BITS value needed for large files... no
    checking shared library type for unknown-Linux... plain .so
    checking whether the compiler accepts -fvisibility=hidden... yes
    checking how to run the C preprocessor... x86_64-linux-gnu-gcc -pthread -E
    checking for egrep... /bin/grep -E
    checking for ANSI C header files... yes
    checking for sys/types.h... yes
    checking for sys/stat.h... yes
    checking for stdlib.h... yes
    checking for string.h... yes
    checking for memory.h... yes
    checking for strings.h... yes
    checking for inttypes.h... yes
    checking for stdint.h... yes
    checking for unistd.h... yes
    checking for stdlib.h... (cached) yes
    checking for unistd.h... (cached) yes
    checking for sys/param.h... yes
    checking for getpagesize... yes
    checking for working mmap... yes
    checking for gmtime_r... yes
    checking for fsync... yes
    checking for drand48... yes
    checking for srand48_deterministic... no
    checking whether fdatasync is declared... yes
    checking for fdatasync... yes
    checking for library containing log... -lm
    checking for zlib.h... yes
    checking for inflate in -lz... yes
    checking for library containing recv... none required
    checking for bzlib.h... no
    checking for BZ2_bzBuffToBuffCompress in -lbz2... no
    configure: error: libbzip2 development files not found
    
    The CRAM format may use bzip2 compression, which is implemented in HTSlib
    by using compression routines from libbzip2 <http://www.bzip.org/>.
    
    Building HTSlib requires libbzip2 development files to be installed on the
    build machine; you may need to ensure a package such as libbz2-dev (on Debian
    or Ubuntu Linux) or bzip2-devel (on RPM-based Linux distributions or Cygwin)
    is installed.
    
    Either configure with --disable-bz2 (which will make some CRAM files
    produced elsewhere unreadable) or resolve this error to build HTSlib.
    Makefile:122: htscodecs.mk: No such file or directory
    config.mk:2: *** Resolve configure error first.  Stop.
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/tmp/pip-build-6o7tgi06/pysam/setup.py", line 320, in <module>
        htslib_make_options = run_make_print_config()
      File "/tmp/pip-build-6o7tgi06/pysam/setup.py", line 71, in run_make_print_config
        stdout = subprocess.check_output(["make", "-s", "print-config"])
      File "/usr/lib/python3.6/subprocess.py", line 356, in check_output
        **kwargs).stdout
      File "/usr/lib/python3.6/subprocess.py", line 438, in run
        output=stdout, stderr=stderr)
    subprocess.CalledProcessError: Command '['make', '-s', 'print-config']' returned non-zero exit status 2.
    # pysam: htslib configure options: None
    
    ----------------------------------------
